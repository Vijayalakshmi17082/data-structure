#include <stdio.h>
#include <stdlib.h>

#define MAX 100 
typedef struct {
    int top;
    int items[MAX];
} Stack;
void initialize(Stack *s) {
    s->top = -1; // An empty stack has a top index of -1
}
int isFull(Stack *s) {
    return s->top == MAX - 1;
}
int isEmpty(Stack *s) {
    return s->top == -1;
}
void push(Stack *s, int value) {
    if (isFull(s)) {
        printf("Stack overflow! Cannot push %d\n", value);
        return;
    }
    s->items[++(s->top)] = value;
    printf("%d pushed to stack\n)
int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow! Cannot pop\n");
        return -1; // Return a sentinel value to indicate an error
    }
    return s->items[(s->top)--];
}

int peek(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty! Cannot peek\n");
        return -1; // Return a sentinel value to indicate an error
    }
    return s->items[s->top];
}
void display(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return;
    }
    printf("Stack elements are:\n");
    for (int i = s->top; i >= 0; i--) {
        printf("%d\n", s->items[i]);
    }
}

int main() {
    Stack s;
    initialize(&s);
    push(&s, 10);
    push(&s, 20);
    push(&s, 30);
    display()
    printf("%d popped from stack\n", pop(&s));
    display(&s);
    printf("Top element is %d\n", peek(&s));

    return 0;
}
