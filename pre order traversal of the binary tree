#include <stdio.h>
#include <stdlib.h>


typedef struct TreeNode {
    int value;
    struct TreeNode *left;
    struct TreeNode *right;
}
 TreeNode;

TreeNode* createNode(int value) {
    TreeNode *newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


TreeNode* insertIntoBST(TreeNode *root, int value) {
    if (root == NULL) {
        return createNode(value);
    }
    if (value < root->value) {
        root->left = insertIntoBST(root->left, value);
    } else {
        root->right = insertIntoBST(root->right, value);
    }
    return root;
}


void preOrderTraversal(TreeNode *root) {
    if (root != NULL) {
        // Visit the root node
        printf("%d ", root->value);
        // Traverse the left subtree
        preOrderTraversal(root->left);
        // Traverse the right subtree
        preOrderTraversal(root->right);
    }
}

int main() {
    TreeNode *root = NULL;
    
    root = insertIntoBST(root, 50);
    insertIntoBST(root, 30);
    insertIntoBST(root, 70);
    insertIntoBST(root, 20);
    insertIntoBST(root, 40);
    insertIntoBST(root, 60);
    insertIntoBST(root, 80);
    
    // Print the pre-order traversal of the BST
    printf("Pre-order traversal of the BST:\n");
    preOrderTraversal(root);
    printf("\n");

    
    return 0;
}
