int **memo, temp;
int brute_force(int** mat, int m, int n, int y, int x, int max) {
    if (y + 1 < m && mat[y][x] < mat[y + 1][x]) { // go down
        if (memo[y + 1][x] != -1) {
            max = (max < memo[y + 1][x]) ? memo[y + 1][x] : max;
        }
        else {
            temp = brute_force(mat, m, n, y + 1, x, 0);
            max = (max < temp) ? temp : max;
        }
    }
    if (y - 1 > -1 && mat[y][x] < mat[y - 1][x]) { // go up
        if (memo[y - 1][x] != -1) {
            max = (max < memo[y - 1][x]) ? memo[y - 1][x] : max;
        }
        else {
            temp = brute_force(mat, m, n, y - 1, x, 0);
            max = (max < temp) ? temp : max;
        }
    }
    if (x + 1 < n && mat[y][x] < mat[y][x + 1]) { // go right
        if (memo[y][x + 1] != -1) {
            max = (max < memo[y][x + 1]) ? memo[y][x + 1] : max;
        }
        else {
            temp = brute_force(mat, m, n, y, x + 1, 0);
            max = (max < temp) ? temp : max;
        }
    }
    if (x - 1 > -1 && mat[y][x] < mat[y][x - 1]) { // go left
        if (memo[y][x - 1] != -1) {
            max = (max < memo[y][x - 1]) ? memo[y][x - 1] : max;
        }
        else {
            temp = brute_force(mat, m, n, y, x - 1, 0);
            max = (max < temp) ? temp : max;
        }
    }
    memo[y][x] = max + 1;
    return max + 1;
}


int longestIncreasingPath(int **matrix, int matrixSize, int* matrixColSize) {
    int global_max = 0, returned_max = 0;
    memo = (int**)malloc(sizeof(int*) * matrixSize);
    for (int i = 0; i < matrixSize; i++) {
        memo[i] = (int*)malloc(sizeof(int) * *matrixColSize);
        for (int j = 0; j < *matrixColSize; j++)
            memo[i][j] = -1;
    }
    for (int y = 0; y < matrixSize; y++) {
        for (int x = 0; x < *matrixColSize; x++) {
            returned_max = 0;
            if (memo[y][x] == -1)
                returned_max = brute_force(matrix, matrixSize, *matrixColSize, y, x, 0);
            global_max = (global_max < returned_max) ? returned_max : global_max;
        }
    }

    //for (int y = 0; y < matrixSize; y++) {
    //    for (int x = 0; x < *matrixColSize; x++) {
    //        printf("%2d ", matrix[y][x]);
    //    }
    //    printf("\n");
    //}
    //printf("\n");
    //for (int y = 0; y < matrixSize; y++) {
    //    for (int x = 0; x < *matrixColSize; x++) {
    //        printf("%2d ", memo[y][x]);
    //    }
    //    printf("\n");
    //}

    for (int i = 0; i < matrixSize; i++) {
        free(memo[i]);
    }
    free(memo);
    return global_max;
}
